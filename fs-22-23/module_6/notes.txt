05-02-2025

Steps to initialize a new project using nodejs
1. npm init
2. Answer few basic questions
3. Package.json will be created
4. add start script in package.json
5. run start script to start the project
---------------------------------------------------------
13-02-2025

Server & API Developement Intro

---------------------------------------------------------
14-02-2025

?id=1 => req.query

/users/:id i.e /users/1 => req.params

---------------------------------------------------------
15-02-2025
Middlewares

Types of Middlewares
1. App level middleware => Completed
2. Route level middleware => Completed
3. Error handling middleware => Completed
4. Third party middleware => Homework
5. Built in middlewares => Completed

Custom Middlewares => We write on our own
Pre defined Middlewares => Already written

---------------------------------------------------------
17-02-2025

Middlewares contd..
URL Shortner

---------------------------------------------------------
20-02-2025

DB Cluster
    DB Server (1. url/host 2. port no(27017)) mongodb://localhost:27017 => Connection String
        DB
            Collection
                Documents
                    K-V Pairs

MQL (Mongo Query Language)

CRUD
Create => 
insertOne()
insertMany()

Read => 
Syntax : 
db.<collection-name>.find()
db.<collection-name>.findOne()

db.products.find() => 0-10, 10-20 ...

Comparision Operator

== -> $eq
>  -> $gt
>= -> $gte
<  -> $lt
<= -> $lte
!= -> $ne

Q. Write a query to find all the products whose price is 14.99
db.products.find({
    price : {
        $eq: 14.99
    }
})

Q. Write a query to find all the products whose price is 9.99
db.products.find({
    price : {
        $eq: 9.99
    }
})

db.products.find({
    price : 9.99
})

Q. Write a query to find all the products whose rating is 9.49
db.products.find({
    rating: {
        $eq: 9.49
    }
})

Q. Write a query to find a product whose price is 49.99
db.products.findOne({
    price: {
        $eq: 49.99
    }
})

Q. Write a query to find the product whose price is less than 35
db.products.find({
    price: {
        $lt: 35
    }
})
.count() // Count the no of query results


Q. Write a query to find the product whose price is greater than or eqal to  15000
db.products.find({
    price: {
        $gte: 15000
    }
})

Q. Write a query to find all the products whole rating is not 5.5

db.products.find({
    rating: {
        $ne: 2.51
    }
})


Logical Operator

&& => $and
|| => $or
! => $not

Q. Write a query to find all the product where rating is at least 4 and price is at most 100
db.products.find({
    $and: [
        {
            rating: {
                $gt: 4
            }
        },
        {
            price: {
                $lt: 100
            }
        }
    ]
})


Q. Write a query to find a product which has either the rating 3 or price 500 or more

db.products.findOne({
    $or: [
        {
            rating: {
                $eq: 3
            }
        },
        {
            price: {
                $gte: 500
            }
        }
    ]
})

db.products.findOne({
    $or: [
        {
            rating: 3
        },
        {
            price: {
                $gte: 500
            }
        }
    ]
})

Q. Find me all the mobiles under 15000
db.products.find({
    $and: [
        {
            category: {
                $eq: "mobile"
            }
        },
        {
            price: {
                $lt: 15000
            }
        }
    ]
})

db.products.find({    
    category: "laptops",
    price: {
        $lt: 15000
    }
})


Q. Find all products having phone in their title
db.products.find({
    title: /phone/
})

---------------------------------------------------------
21-02-2025

Project structuring (MVC)
MongoDB + Node JS connection

Naukri.com =>
Job related operation => CURD (Job Module)
Applicant module
HR Module
Settings Module

---------------------------------------------------------
24-02-2025


edit => 
1. _id of the job to edit
2. fields and their values to edit

find variants in mongoose model => find, findOne, findById
edit variants in mongoose model => updateMany, udpateOne, findByIdAndUpdate
delete variants in mongoose model=> deleteMany, deleteOne, findByIdAndDelete

---------------------------------------------------------
28-02-2025
Sending Email = SMTP (Simple Mail Transfer Protocol)
File Sharing app (File upload)

---------------------------------------------------------
01-03-2025

File upload
Share File
Download File
Delete File

---------------------------------------------------------
02-03-2025

Shallow Copy vs Deep Copy
const obj = {
    a: 1,
    b: 2,
    c: "alsdfasd",
    d: false,
    e: {
        x: 123,
        y: "ABC"
    }
}

const obj2 = obj;
obj2.a = 5;

const obj2 = { ...obj }; // new ay of shallow copy
Object.assign(obj2, obj); // old way of shallow copy

const obj3 = JSON.parse(JSON.stringify(obj)); //deep copy
lodash (_) => _.deepClone() // deep copy



-------------------------------------------------------------------------------------

console.log([] + {}); // implicit type coersion    Explicit

+ => numbers - mathematical addition
+ -> strings - string concatenation

"" + '[object Object]' => '[object Object]'

-------------------------------------------------------------------------------------

process.nextTick()

Micro task queue => higher priority (promises)
Macro task queue => lower priority (setTimeout, setIntervals etc)


console.log("A") => 1

Promise.resolve((res) => res(console.log("Resolved"))) => P1

process.nextTick(() => console.log("B")) => Event loop's next iteration => P0

console.log("C") => 2

A
C
Next tick
Promise

-----------------------------------------------------------------------------------------
Polyfill => Older implementation of newer methods
reduce() => for, while, if, else


=========================================================================================
Agenda for Next Week 

FS Project (Backend + Frontend)
eCommerce
1. User module (Signup, Login, Forgot password etc)
2. Product module (Create Product, Listing API - Paginated & Search Oriented, Detail API)
3. Cart module (Add item, remove item etc)
4. Checkout module (Place order, payment gateway integration)
5. Order module (Order confirmation, order history etc)
6. Coupon/promo code moudle (Create coupon, apply coupon etc )

Learnings
1. Authentication & Authorization
2. Paginated APIs
3. Payment Gateway Integration
4. Editing non primitive data types in mongodb
5. Environment variables (Hiding the security related data)
6. Docker introduction

Hashing
Encryption / Decryption
Encoding / Decoding
JWT

=========================================================================================
Passwords

Plain Text => In simple words
Cipher Text => Readable but you can't understand what it means

abcd1234 => asdf90a8sdf90asdf0a0ad
zyx456 => a9sf7d8a9s8fduasoifduasdf9as

NON-SECURITTY RELATED TERMS

Encoding => System can understand the data
Decoding => Human can understand the data


Whatsapp Chat
Encryption => Plain to Cipher text
Decryption => Cipher to plain text


Password 
Hashing => Plain to cipher text
$2b$10$ZkESKuJMgy8xqmaEaZrb0OicITq/1NYJfUVccN8Yv.3mjroEc47wm
$2b$10$45ffj6lNakECFA6O8/ZoUeT5KDU6KaxelhYqYL3fKYZwncMRP1kD.
$2b$10$8Im7SnJ6XSJ453226ZK3Q.ap4xKvWK1Hd6UUzD8e/SkG/2dJieXci

=========================================================================================
Pagination

195 products

Items per page => 10

Page 1 => 1-10
Page 2 => 11-20
Page 3 => 21-30
......

Skip => Page 1 => 0
Skip => Page 2 => 10
Skip => Page 3 => 20

(pageNo -1) * 10 => 10

=========================================================================================
CORS (Cross Origin Resource Sharing) => Web browser

Orign => Source URL (Client)
Client Source => http://127.0.0.1:5500/
Server Source => http://127.0.0.1:5000/

Cross Origin Resource Sharing


Client Source => abc.com
Server Source => amazon.in (Please allow the cross origin request)


Client Source => abc.com
Server Source => abc.com (Same Origin Resource Sharing)

Client Source -> abcd.vercel.com 
Server Source -> xyz.vercel.com

=========================================================================================
12-03-2025
Docker introduction
Micro service introduction

NodeJS -> 20, 18, 21 etc
OS -> Windows, Linux, Mac etc
Packages -> versioning

Docker / Kubernetes etc => Containerization / Orchestration

Docker => Image => A folder

// OS => cent os
NodeJS => 21
Copy code 
Project Packages etc (node_modules) installation
Start the project - Connect with docker

Windows / Mac / Linux
Virutalization should be on in your system


Docker CLI => GUI (Docker Desktop)


API Calls

Client -> Server

Monolithic => Everything in one place
Microservices => Split the project into different sub projects

10 
3 Server Profile & User
4 Booking
3 Information

1 Server Profile & User
8 Booking
1 Information

Load Balancer => API Gateway => 
GRPC => google Remote Prcedural Call

MFA


5 Server => 5*100

Load Blala

Swagger